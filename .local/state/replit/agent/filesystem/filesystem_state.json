{"file_contents":{"poor-to-great-forge/README.md":{"content":"# Poor-to-Great Forge (MVP scaffold)\n\nThis repository contains a scaffold for the \"Poor-to-Great Forge\" webapp MVP.\n\nStructure:\n- server/: Express + Socket.io server with simple in-memory store and workspace APIs.\n- client/: Minimal React client (CRA-like) using Tailwind CDN for quick UI.\n\nNotes:\n- Intended for Replit deployment. Replace in-memory store with Replit DB or Postgres for persistence.\n- Yjs and y-websocket should be integrated later for CRDT-based real-time collaboration.\n- AI stubs and PDF export are left as next steps.\n\nRun locally (Windows PowerShell):\n1. Install root deps: npm install\n2. Install client deps (if you replace with CRA): cd client && npm install react react-dom socket.io-client\n3. Start server: npm run server\n\nTests:\n- Run `npm test` to execute Jest tests for utilities.\n","size_bytes":810},"poor-to-great-forge/server/routes/workspace.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst { v4: uuidv4 } = require('uuid');\nconst Joi = require('joi');\n\n// Simple in-memory store for MVP. Replace with Replit DB or Postgres later.\nconst store = { workspaces: {} };\n\nconst workspaceSchema = Joi.object({\n  companyName: Joi.string().min(2).required(),\n  creatorId: Joi.string().required()\n});\n\nrouter.post('/', (req, res) => {\n  const { error, value } = workspaceSchema.validate(req.body);\n  if (error) return res.status(400).json({ error: error.message });\n\n  const id = uuidv4();\n  const workspace = {\n    workspaceId: id,\n    companyName: value.companyName,\n    phase: 'prep',\n    users: [{ userId: value.creatorId, role: 'facilitator', joinedAt: Date.now() }],\n    prep: {},\n    scanning: {},\n    challenges: {},\n    newStrategy: {},\n    synthesis: {},\n    report: {},\n    metrics: {},\n    history: []\n  };\n\n  store.workspaces[id] = workspace;\n  return res.json({ workspace });\n});\n\nrouter.get('/:id', (req, res) => {\n  const id = req.params.id;\n  const workspace = store.workspaces[id];\n  if (!workspace) return res.status(404).json({ error: 'Not found' });\n  res.json({ workspace });\n});\n\nrouter.post('/:id/phase/unlock', (req, res) => {\n  const id = req.params.id;\n  const { nextPhase, userId } = req.body;\n  const workspace = store.workspaces[id];\n  if (!workspace) return res.status(404).json({ error: 'Not found' });\n\n  // simple role check: only facilitators can unlock\n  const user = workspace.users.find((u) => u.userId === userId);\n  if (!user || user.role !== 'facilitator') return res.status(403).json({ error: 'Forbidden' });\n\n  const phases = ['prep', 'scanning', 'challenges', 'new_strategy', 'synthesis', 'report'];\n  const currentIndex = phases.indexOf(workspace.phase);\n  const nextIndex = phases.indexOf(nextPhase);\n  if (nextIndex === -1) return res.status(400).json({ error: 'Invalid phase' });\n  if (nextIndex !== currentIndex + 1) return res.status(400).json({ error: 'Phase progression violation' });\n\n  workspace.phase = nextPhase;\n  workspace.history.push({ type: 'phase-unlock', data: { by: userId, phase: nextPhase }, timestamp: Date.now() });\n  res.json({ workspace });\n});\n\nmodule.exports = router;\n","size_bytes":2215},"netlify.toml":{"content":"[build]\n  publish = \".\"\n\n[analytics]\n  enabled = true\n\n[context.production.environment]\n  WHATSAPP_NUMBER = \"263778105259\"\n  CONTACT_EMAIL = \"build@amanizw.com\"\n\n# No build step required; this is a static site. Deploy by connecting the repo or drag-and-drop the folder to Netlify.","size_bytes":280},"poor-to-great-forge/server/utils/rice.js":{"content":"\nfunction calculateRICE({ reach = 0, impact = 0, confidence = 0, effort = 1 }) {\n  // RICE = (Reach * Impact * Confidence) / Effort\n  // Ensure numeric values are used and validate effort\n  const r = Number(reach) || 0;\n  const i = Number(impact) || 0;\n  const c = Number(confidence) || 0;\n  const e = Number(effort);\n  if (!isFinite(e) || e <= 0) throw new Error('Effort must be a finite number > 0');\n  return (r * i * c) / e;\n}\n\nmodule.exports = { calculateRICE };\n","size_bytes":468},"assets/styles.css":{"content":"/* Custom styles to complement Tailwind utility classes */\n:root{\n  --brand-900: #0f172a;\n  --brand-800: #1e40af;\n}\n\nbody{font-family: 'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial}\n\n/* Hero background â€” replace URL with your hero photo or CDN image */\n.hero-bg{\n  background-image: linear-gradient(rgba(2,6,23,0.35), rgba(2,6,23,0.35)), url('https://placehold.co/1920x1080/334155/FFFFFF?text=Stunning+Kitchen+Renovation');\n  background-size: cover;\n  background-position: center;\n}\n\n/* Portfolio item transitions */\n.portfolio-item{transition:transform .35s ease, opacity .35s ease}\n.portfolio-item.hidden{transform:scale(.95);opacity:0;height:0;margin:0;padding:0;overflow:hidden}\n\n/* Filter active button */\n.filter-btn-active{background-color:var(--brand-800);color:white}\n\n/* Small utilities */\n.blur-3xl{filter:blur(40px)}\n\n/* Make svg brand icon align */\nheader svg{display:inline-block}\n\n/* Improve focus outlines for accessibility */\n:focus{outline:2px solid rgba(99,102,241,0.6);outline-offset:3px}\n\n/* Mobile menu animation */\n#mobile-menu{transition:opacity .2s ease, transform .2s ease}\n\n/* Floating CTA */\n#floating-cta{backdrop-filter:blur(6px)}\n#floating-cta:focus{transform:translateY(-2px);box-shadow:0 6px 18px rgba(14,165,233,0.18)}\n\n/* Floating WhatsApp Button */\n#floating-whatsapp {\n  box-shadow: 0 8px 32px rgba(37, 211, 102, 0.18);\n  animation: floatWABtn 1.8s ease-in-out infinite alternate;\n}\n@keyframes floatWABtn {\n  0% { transform: translateY(0); }\n  100% { transform: translateY(-6px); }\n}\n\n/* Hero image full-bleed + position */\n.hero-image{position:relative;height:100%;width:100%;display:block}\nsection.relative{min-height:420px}\n@media(min-width:768px){section.relative{min-height:520px}}\n","size_bytes":1759},"poor-to-great-forge/server/index.js":{"content":"const express = require('express');\nconst http = require('http');\nconst { Server } = require('socket.io');\nconst cors = require('cors');\nconst jwt = require('jsonwebtoken');\nconst { v4: uuidv4 } = require('uuid');\nconst bodyParser = require('body-parser');\nconst workspaceRouter = require('./routes/workspace');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, { cors: { origin: '*' } });\n\napp.use(cors());\napp.use(bodyParser.json());\n\napp.use('/api/workspaces', workspaceRouter);\n\napp.get('/health', (req, res) => res.json({ ok: true, ts: Date.now() }));\n\nio.on('connection', (socket) => {\n  console.log('socket connected', socket.id);\n\n  socket.on('join-workspace', ({ workspaceId, user }) => {\n    socket.join(workspaceId);\n    socket.to(workspaceId).emit('user-joined', { user, socketId: socket.id });\n  });\n\n  socket.on('swot-update', (payload) => {\n    const { workspaceId } = payload;\n    if (workspaceId) io.to(workspaceId).emit('swot-update', payload);\n  });\n\n  socket.on('vote-cast', (payload) => {\n    const { workspaceId } = payload;\n    if (workspaceId) io.to(workspaceId).emit('vote-cast', payload);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('socket disconnected', socket.id);\n  });\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => console.log(`Server listening on ${PORT}`));\n","size_bytes":1371},"poor-to-great-forge/server/utils/rice.test.js":{"content":"const { calculateRICE } = require('./rice');\n\ntest('calculates RICE correctly for integer inputs', () => {\n  const val = calculateRICE({ reach: 100, impact: 3, confidence: 0.8, effort: 5 });\n  expect(val).toBeCloseTo((100 * 3 * 0.8) / 5);\n});\n\ntest('throws on zero effort', () => {\n  expect(() => calculateRICE({ reach: 10, impact: 2, confidence: 1, effort: 0 })).toThrow();\n});\n","size_bytes":379},"poor-to-great-forge/client/src/App.js":{"content":"import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io(window.location.origin.replace(/3000/, ''), { autoConnect: false });\n\nfunction HedgehogAudit({ data, onChange }) {\n  const [local, setLocal] = useState(data || { passion: 5, economics: 5, strengths: [] });\n\n  useEffect(() => setLocal(data), [data]);\n\n  return (\n    <div className=\"p-4 bg-white rounded shadow\">\n      <h3 className=\"text-lg font-semibold\">Hedgehog Audit</h3>\n      <div className=\"mt-3\">\n        <label className=\"block\">Passion: {local.passion}</label>\n        <input type=\"range\" min=\"1\" max=\"10\" value={local.passion}\n          onChange={(e) => { const v = Number(e.target.value); setLocal({ ...local, passion: v }); onChange({ ...local, passion: v }); }} />\n      </div>\n      <div className=\"mt-3\">\n        <label className=\"block\">Economics: {local.economics}</label>\n        <input type=\"range\" min=\"1\" max=\"10\" value={local.economics}\n          onChange={(e) => { const v = Number(e.target.value); setLocal({ ...local, economics: v }); onChange({ ...local, economics: v }); }} />\n      </div>\n    </div>\n  );\n}\n\nfunction Workspace() {\n  const [workspace, setWorkspace] = useState(null);\n  const [joined, setJoined] = useState(false);\n\n  useEffect(() => {\n    // Lazy connect to server socket\n    socket.io.opts.path = '/socket.io';\n    socket.connect();\n    socket.on('connect', () => console.log('connected', socket.id));\n    socket.on('swot-update', (p) => console.log('swot-update', p));\n    socket.on('user-joined', (u) => console.log('user-joined', u));\n    return () => { socket.disconnect(); };\n  }, []);\n\n  async function createWorkspace() {\n    const res = await fetch('/api/workspaces', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: 'Acme Corp', creatorId: 'user-1' }) });\n    const json = await res.json();\n    setWorkspace(json.workspace);\n  }\n\n  function joinWS() {\n    if (!workspace) return alert('Create workspace first');\n    socket.emit('join-workspace', { workspaceId: workspace.workspaceId, user: { userId: 'user-1', name: 'Demo User' } });\n    setJoined(true);\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <h1 className=\"text-2xl font-bold\">Poor-to-Great Forge â€” Workspace</h1>\n      {!workspace && <div className=\"mt-6\"><button className=\"px-4 py-2 bg-blue-600 text-white rounded\" onClick={createWorkspace}>Create Demo Workspace</button></div>}\n\n      {workspace && (\n        <div className=\"mt-6 grid grid-cols-2 gap-4\">\n          <div>\n            <div className=\"bg-white p-4 rounded shadow\">\n              <h2 className=\"font-semibold\">{workspace.companyName} <small className=\"text-xs text-gray-500\">phase: {workspace.phase}</small></h2>\n              <p className=\"text-sm text-gray-600\">Workspace ID: {workspace.workspaceId}</p>\n              <div className=\"mt-3\">\n                {!joined ? <button className=\"px-3 py-1 bg-green-600 text-white rounded\" onClick={joinWS}>Join Live</button> : <span className=\"text-sm text-green-700\">Connected</span>}\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <HedgehogAudit data={workspace.prep.hedgehogAudit} onChange={(d) => console.log('hedgehog', d)} />\n            </div>\n          </div>\n\n          <div>\n            <div className=\"bg-white p-4 rounded shadow\">\n              <h3 className=\"font-semibold\">PESTLE</h3>\n              <p className=\"text-sm text-gray-600 mt-2\">Editable grid placeholder</p>\n            </div>\n\n            <div className=\"mt-4 bg-white p-4 rounded shadow\">\n              <h3 className=\"font-semibold\">SWOT Board (Live)</h3>\n              <p className=\"text-sm text-gray-600 mt-2\">Drag-and-drop board placeholder â€” real-time via Socket.io/Yjs</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return <Workspace />;\n}\n","size_bytes":3945},"README.md":{"content":"## Netlify Environment Variables\n\nSet these in your Netlify dashboard for dynamic contact info:\n\n- `WHATSAPP_NUMBER` (e.g. 263778105259)\n- `CONTACT_EMAIL` (e.g. build@amanizw.com)\n\n## Netlify Analytics\n\nNetlify Analytics is enabled in `netlify.toml` for privacy-friendly traffic stats.\n## Deploying with Git & Netlify\n\n### 1. Initialize a Git repository (PowerShell)\n\n```powershell\ncd \"<project-folder>\"  # Replace with your actual folder path if needed\ngit init\ngit add .\ngit commit -m \"Initial commit: Amani Construction Netlify site\"\n```\n\n### 2. Create a new GitHub repo (in your browser)\n- Go to https://github.com/new\n- Name it (e.g. `amani-construction-site`), set to Public or Private, and **do not initialize with a README** (since you already have one).\n- Copy the repo URL (e.g. `https://github.com/yourusername/amani-construction-site.git`)\n\n### 3. Add the remote and push (PowerShell)\n\n```powershell\ngit remote add origin https://github.com/yourusername/amani-construction-site.git\ngit branch -M main\ngit push -u origin main\n```\n\n### 4. Connect to Netlify\n- In Netlify, click \"Add new site\" â†’ \"Import an existing project\"\n- Connect your GitHub account and select your new repo\n- **Build command:** (leave blank)\n- **Publish directory:** `/`\n- Click \"Deploy site\"\n\n### 5. Test your site\n- Visit your Netlify URL (e.g. `https://amaniconstruction.netlify.app`)\n- Submit a test form entry and check Netlify's Forms dashboard\n\n---\n# Amani Construction â€” Static Website\n\nThis folder contains a static, responsive marketing website for Amani Construction optimized for Netlify deployment.\n\nContents:\n- `index.html` â€” The main page using Tailwind via CDN and some custom CSS in `assets/styles.css`.\n- `assets/styles.css` â€” Small custom stylesheet.\n- `netlify.toml` â€” Minimal Netlify config (static site; publish root).\n\nFeatures implemented:\n- Accessible, responsive navigation and mobile menu.\n- Netlify-ready contact form (uses `data-netlify=\"true\"`) so form submissions work when deployed to Netlify.\n- Portfolio filtering, testimonial slider, and subtle UI transitions.\n- SEO meta tags, Open Graph, and JSON-LD structured data.\n- Lazy-loading images for better performance.\n\nRecent improvements:\n- Added a small SVG `assets/favicon.svg` and referenced it in `index.html`.\n- Preloaded the hero image to improve Largest Contentful Paint (LCP).\n- Added a floating CTA button (`#floating-cta`) for quick conversions.\n- Added a `thank-you.html` page and wired the contact form to redirect there on successful submit (Netlify forms friendly).\n\nHero improvements:\n- The hero now uses a responsive `<picture>` with `srcset` for multiple sizes and a preload to improve LCP. Replace placeholders with your real images (1600/1200/800 widths recommended).\n\nAnalytics:\n- There's a commented Google Analytics (GA4) placeholder in `index.html`. Replace `MEASUREMENT_ID` and uncomment to enable tracking.\n\nNetlify deployment extras:\n- `sitemap.xml` is included at the site root for search engines.\n- `robots.txt` references the sitemap and allows indexing.\n- `_headers` contains recommended security headers and caching rules for Netlify. These will be applied automatically when you deploy to Netlify.\n\nDeploying to Netlify:\n1. Push the repository to GitHub (or GitLab/Bitbucket).\n2. In Netlify, create a new site from Git and connect your repo. Branch: `main` (or whichever branch you use). Build command: _none_. Publish directory: `/`.\n3. After the first successful deploy, visit `Site settings -> Forms` to confirm Netlify form submissions appear. Submit a test entry to confirm.\n\nOptional: If you'd like, I can create and push a Git repository for you (I'll provide PowerShell commands and instructions â€” you'll run them locally). Or I can add image optimization assets next.\n\nDeployment (quick):\n1. Push this folder to a public Git provider (GitHub, GitLab, Bitbucket).\n2. In Netlify, click \"New site from Git\" and connect your repository. Choose the branch and deploy. No build command required â€” publish directory should be `/`.\n\nOr drag-and-drop:\n1. Zip the project files or open the project folder.\n2. Drag the folder into \"Sites\" â†’ \"Add new site\" â†’ \"Deploy manually\" on the Netlify app.\n\nNotes â€” Netlify Forms:\n- The contact form is configured to work with Netlify's built-in forms using `data-netlify=\"true\"` and a hidden `form-name` input. You don't need a server.\n- After your first deploy, visit your site and submit the form once to see it appear in the Netlify dashboard under Forms.\n\nCustomizations you might want next:\n- Replace placeholder images with real project photos (use `loading=\"lazy\"` and optimized sizes).\n- Add a proper favicon and social images.\n- Convert Tailwind to a build pipeline for PurgeCSS if you expand the site.\n\nIf you want, I can:\n- Replace the placeholders with a small curated image set and optimize them.\n- Create a Git repo and push these files for you (if you provide credentials or accept instructions).\n","size_bytes":4967},"poor-to-great-forge/client/src/index.js":{"content":"import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\ncreateRoot(document.getElementById('root')).render(<App />);\n","size_bytes":161}},"version":2}